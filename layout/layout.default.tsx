import type { NextPage } from 'next';
import Cookies from "js-cookie";
import {createContext, useEffect, useRef, useState} from "react";
import {useDispatch, useSelector, useStore} from "react-redux";
import Head from 'next/head';
import Axios from "../helpers/axios";
import HeaderPanell from "../components/header.panel";
import { IQuery } from "../dto/query";
import { IUser } from "../dto/user";
import { IArticle } from "../dto/news";
import PopupWrong from "../components/popup.wrong";
import { Socket } from "socket.io-client";
import SocketIO from "../helpers/socket.io";
import {setOnline} from "../redux/online/onlineSlice";

interface IWrong {
  active: boolean,
  message: string
}

interface ILayoutDefault {
  title: string,
  query: IQuery,
};

interface IContext {
  user: IUser,
  query: IQuery,
  article?: IArticle,
  short?: IArticle[],
  win: number,
  wrong: (message: string) => void,
  socket: Socket
};

export const DataContext = createContext({} as IContext);

const LayoutDefault: NextPage<ILayoutDefault> = ({title, query, children }) => {
  const dispatch = useDispatch();
  const profile = useSelector(( store: any ) => store.user);
  const online = useSelector(( store: any ) => store.online);
  const token = Cookies.get('token');
  const [win, setWin] = useState<number>(Date.now());
  const [wrong, setWrong] = useState<IWrong>({} as IWrong);
  const globalClick = () => setWin(Date.now());
  const wrongActive = (message: string): void => {
    setWrong({ active: true, message });
  };
  const [socket, setSocket] = useState<Socket>({} as Socket);

  useEffect( () => {
    if(Cookies.get('token') && !profile.id) Cookies.remove('token');
    if(window) window.addEventListener('click', globalClick);
    if(window) SocketIO.on('connect', () => {
      setSocket(SocketIO);
      SocketIO.emit('online',null, (list: string[]) => dispatch(setOnline(list)));
    });
    return () => {
      window.removeEventListener('click', globalClick);
    }
  },[]);

  useEffect(() => {
    if(window){
      SocketIO.on('listener',(id: string) => {
        if(!online.includes(id) && window) dispatch(setOnline([...online, id]));
      })
      SocketIO.on('offline',(id: string) => {
        const index = online.findIndex((key: string) => key === id);
        if(index !== -1){
          const del = [].concat(online)
          del.splice(index, 1);
          dispatch(setOnline(del))
        }
      })
    }
  },[online.length]);

  useEffect(() => {
    Axios.defaults.headers.common = {'Authorization': `Bearer ${token}`};
  },[token]);

  useEffect(() => {
    if(SocketIO.connected) setSocket(SocketIO);
  },[SocketIO.connected])

  return (
    <DataContext.Provider value={{user: profile, query, win, wrong: wrongActive, socket: socket }}>
      <Head>
        <title>{title}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header>
        <HeaderPanell />
      </header>
      <main id="main">
        <div className="container">{children}</div>
      </main>
      <footer id="footer"/>
      {wrong.active && <PopupWrong message={wrong.message} close={() =>  setWrong({...wrong, active: false})} /> }
    </DataContext.Provider>
  )
};

export default LayoutDefault;